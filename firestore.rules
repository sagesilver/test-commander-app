rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function hasUserRole(roles, role) {
      return roles != null && (
        (roles is list && roles.hasAny([role])) ||
        (roles is map && ((role in roles) || (roles[role] == true)))
      );
    }
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) ? 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data : 
             null;
    }
    
    function isAppAdmin() {
      let userData = getUserData();
      return userData != null && hasUserRole(userData.roles, 'APP_ADMIN');
    }
    
    function isOrgAdmin(organizationId) {
      let userData = getUserData();
      return userData != null && 
             userData.organisationId == organizationId && 
             hasUserRole(userData.roles, 'ORG_ADMIN');
    }
    
    function isOrgMember(organizationId) {
      let userData = getUserData();
      return userData != null && userData.organisationId == organizationId;
    }

    function isProjectManager(organizationId) {
      let userData = getUserData();
      return userData != null && userData.organisationId == organizationId && hasUserRole(userData.roles, 'PROJECT_MANAGER');
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAppAdmin() || 
                    (isAuthenticated() && (request.auth.uid == userId || resource.data.email == request.auth.token.email)) ||
                    (isOrgAdmin(resource.data.organisationId));
      allow create: if isAppAdmin() || 
                      (isOrgAdmin(request.resource.data.organisationId));
      allow update: if isAppAdmin() || 
                      (request.auth.uid == userId || resource.data.email == request.auth.token.email) ||
                      (isOrgAdmin(resource.data.organisationId));
      allow delete: if isAppAdmin() || 
                      (isOrgAdmin(resource.data.organisationId));
    }

    // Global Test Types catalog (read-only for all authenticated users; write App Admin only)
    match /globalTestTypes/{testTypeId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAppAdmin();
    }

    // Organizations collection
    match /organizations/{organizationId} {
      allow read: if isAppAdmin() || isOrgMember(organizationId);
      allow create: if isAppAdmin();
      allow update, delete: if isAppAdmin() || isOrgAdmin(organizationId);

      // Projects subcollection
      match /projects/{projectId} {
        function isProjectAdmin() {
          return request.auth != null &&
                 resource.data.projectAdminIds != null && (
                   (resource.data.projectAdminIds is list && resource.data.projectAdminIds.hasAny([request.auth.uid])) ||
                   (resource.data.projectAdminIds is map && (request.auth.uid in resource.data.projectAdminIds))
                 );
        }

        // Read policy: org members can read; non-admins should only see ACTIVE via queries
        // We do not enforce ACTIVE filter here to allow admins to read INACTIVE when needed.
        allow read: if (
          isOrgMember(organizationId) || isAppAdmin() || isOrgAdmin(organizationId) || isProjectAdmin()
        );

        // Create allowed for App Admin, Org Admin, and Project Manager (org-scoped)
        allow create: if isAppAdmin() || isOrgAdmin(organizationId) || isProjectManager(organizationId);

        // Update/Delete allowed to App/Org Admin or Project Admins
        allow update, delete: if isAppAdmin() || isOrgAdmin(organizationId) || isProjectManager(organizationId) || isProjectAdmin();
      }

      // Folders subcollection
      match /projects/{projectId}/folders/{folderId} {
        // All org members can read and manage folders per spec
        allow read: if isOrgMember(organizationId) || isAppAdmin() || isOrgAdmin(organizationId);
        allow create, update, delete: if isOrgMember(organizationId) || isAppAdmin() || isOrgAdmin(organizationId);
      }

      // Test cases subcollection
      match /projects/{projectId}/testCases/{testCaseId} {
        function canWriteTestCase() {
          // All roles can CREATE tests; updates/deletes allowed for admins/managers or the creator
          return isAppAdmin() || isOrgAdmin(organizationId) || isProjectManager(organizationId) || (isAuthenticated() && request.auth.uid == resource.data.createdBy);
        }

        allow read: if isOrgMember(organizationId) || isAppAdmin() || isOrgAdmin(organizationId);

        // Create: any authenticated org member
        allow create: if (
          isOrgMember(organizationId) || isAppAdmin() || isOrgAdmin(organizationId)
        ) && (
          // Required minimal fields
          request.resource.data.tcid is string &&
          request.resource.data.name is string &&
          request.resource.data.description is string &&
          request.resource.data.author is string &&
          request.resource.data.projectId == projectId &&
          request.resource.data.organizationId == organizationId &&
          // Folder ref must exist if provided
          (
            request.resource.data.folderId == null ||
            exists(/databases/$(database)/documents/organizations/$(organizationId)/projects/$(projectId)/folders/$(request.resource.data.folderId))
          )
        );

        // Update/Delete: admins/managers or test creator
        allow update, delete: if canWriteTestCase();
      }

      // Org-level Test Types selection (store at /organizations/{organizationId}/testTypes/{testTypeId})
      match /testTypes/{testTypeId} {
        // Org members can read their org's enabled test types
        allow read: if isOrgMember(organizationId) || isAppAdmin() || isOrgAdmin(organizationId);
        // Only Org Admins (scoped) can enable/disable and override
        allow create, update, delete: if isOrgAdmin(organizationId);
      }
    }
  }
}
